---
const { class: className, href, referrerpolicy, target, variation } = Astro.props;

const dynamicClasses = [className, variation ? `is-${variation}` : ""];
---

{
  href && (
    <a
      class:list={dynamicClasses}
      href={href}
      referrerpolicy={referrerpolicy ?? "strict-origin-when-cross-origin"}
      rel="noopener"
      target={target ?? "_self"}
    >
      <slot />
    </a>
  )
}

<style>
  .is-link,
  .is-link-white {
    @apply font-ubuntu
    drop-shadow-[2px_3px_2px_rgba(0,0,0,0.25)]
    transition-all
    ease-in-out;
  }

  .is-link {
    @apply text-navyBlue hover:font-ubuntuBold;
  }

  .is-link-white {
    @apply text-white hover:font-ubuntuBold;
  }

  .is-link-navyblue,
  .is-link-mediumgreen {
    @apply 
    active:shadow-none
    bg-navyBlue 
    cursor-pointer
    duration-300
    ease-in-out
    flex
    font-ubuntuBold
    gap-2
    hover:bg-neutral
    hover:border-4
    hover:border-navyBlue 
    hover:duration-700
    hover:opacity-70
    hover:scale-110
    hover:shadow-[0px_4px_4px_rgba(0,0,0,0.25)]
    hover:text-navyBlue
    items-center 
    justify-center	
    min-w-[150px]
    px-5
    py-4	
    rounded-xl
    text-center
    text-neutral
    text-xl 
    transition-all 
    w-fit;
  }

  .is-link-mediumgreen {
    @apply bg-mediumGreen;
  }

  .is-link-navyblue {
    @apply bg-navyBlue;
  }
</style>