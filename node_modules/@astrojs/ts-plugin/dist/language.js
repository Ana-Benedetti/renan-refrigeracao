"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AstroFile = exports.getLanguageModule = void 0;
const language_core_1 = require("@volar/language-core");
const astro2tsx_js_1 = require("./astro2tsx.js");
function getLanguageModule(ts) {
    return {
        createVirtualFile(fileName, snapshot) {
            if (fileName.endsWith('.astro')) {
                return new AstroFile(fileName, snapshot, ts);
            }
        },
        updateVirtualFile(astroFile, snapshot) {
            astroFile.update(snapshot);
        },
    };
}
exports.getLanguageModule = getLanguageModule;
class AstroFile {
    constructor(sourceFileName, snapshot, ts) {
        this.sourceFileName = sourceFileName;
        this.snapshot = snapshot;
        this.ts = ts;
        this.kind = language_core_1.FileKind.TextFile;
        this.capabilities = language_core_1.FileCapabilities.full;
        this.codegenStacks = [];
        this.fileName = sourceFileName;
        this.onSnapshotUpdated();
    }
    update(newSnapshot) {
        this.snapshot = newSnapshot;
        this.onSnapshotUpdated();
    }
    onSnapshotUpdated() {
        this.mappings = [
            {
                sourceRange: [0, this.snapshot.getLength()],
                generatedRange: [0, this.snapshot.getLength()],
                data: language_core_1.FileRangeCapabilities.full,
            },
        ];
        this.embeddedFiles = [];
        const tsx = (0, astro2tsx_js_1.astro2tsx)(this.snapshot.getText(0, this.snapshot.getLength()), this.fileName, this.ts);
        this.embeddedFiles.push(tsx.virtualFile);
    }
}
exports.AstroFile = AstroFile;
